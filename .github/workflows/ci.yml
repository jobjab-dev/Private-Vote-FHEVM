name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: üîç Lint & Format Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  compile-contracts:
    runs-on: ubuntu-latest
    name: üî® Compile Contracts
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contract-artifacts
          path: |
            artifacts/
            types/
          retention-days: 7

  unit-tests:
    runs-on: ubuntu-latest
    name: üß™ Unit Tests
    needs: [lint-and-format, compile-contracts]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build-frontend:
    runs-on: ubuntu-latest
    name: üé® Build Frontend
    needs: [compile-contracts]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download contract artifacts
        uses: actions/download-artifact@v4
        with:
          name: contract-artifacts

      - name: Build frontend
        run: npm run build:frontend
        continue-on-error: true # Frontend might not be ready yet

  security-check:
    runs-on: ubuntu-latest
    name: üõ°Ô∏è Security Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level high

      - name: Check for vulnerabilities
        run: npm audit --audit-level moderate --production

  deploy-staging:
    runs-on: ubuntu-latest
    name: üöÄ Deploy to Staging
    needs: [unit-tests, build-frontend, security-check]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Sepolia testnet
        env:
          MNEMONIC: ${{ secrets.STAGING_MNEMONIC }}
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          echo "Deploying to Sepolia testnet..."
          # npm run deploy:sepolia

      - name: Update deployment info
        run: |
          echo "Updating deployment information..."
          # Update deployment status or notify team

  summary:
    runs-on: ubuntu-latest
    name: üìã Summary
    needs: [lint-and-format, compile-contracts, unit-tests, build-frontend, security-check]
    if: always()
    
    steps:
      - name: Check status
        run: |
          echo "Pipeline Results:"
          echo "- Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "- Compile: ${{ needs.compile-contracts.result }}"
          echo "- Unit Tests: ${{ needs.unit-tests.result }}"
          echo "- Build Frontend: ${{ needs.build-frontend.result }}"
          echo "- Security Check: ${{ needs.security-check.result }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Pipeline failed. Check the logs above for details."
          exit 1

      - name: Success notification
        if: success()
        run: |
          echo "‚úÖ All checks passed! Ready for deployment."
